{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isAlmostEqualF64 from '@stdlib/number-float64-base-assert-is-almost-equal';\nimport reim from '@stdlib/complex-float64-reim';\n\n\n// MAIN //\n\n/**\n* Tests whether two double-precision complex floating-point numbers are approximately equal within a specified number of ULPs (units in the last place).\n*\n* ## Notes\n*\n* -   The function returns `false` if either input value has a `NaN` real or imaginary component.\n* -   The function does not distinguish between `-0` and `+0`, treating them as equal.\n*\n* @param {Complex128} z1 - first complex number\n* @param {Complex128} z2 - second complex number\n* @param {number} maxULP - maximum allowed ULP difference\n* @returns {boolean} boolean indicating whether two double-precision complex floating-point numbers are approximately equal within a specified number of ULPs\n*\n* @example\n* import EPS from '@stdlib/constants-float64-eps';\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var z1 = new Complex128( 1.0, 3.0 );\n* var z2 = new Complex128( 1.0+EPS, 3.0 );\n*\n* var bool = isAlmostEqual( z1, z2, 0 );\n* // returns false\n*\n* bool = isAlmostEqual( z1, z2, 1 );\n* // returns true\n*/\nfunction isAlmostEqual( z1, z2, maxULP ) {\n\tvar parts1 = reim( z1 );\n\tvar parts2 = reim( z2 );\n\treturn (\n\t\tisAlmostEqualF64( parts1[ 0 ], parts2[ 0 ], maxULP ) &&\n\t\tisAlmostEqualF64( parts1[ 1 ], parts2[ 1 ], maxULP )\n\t);\n}\n\n\n// EXPORTS //\n\nexport default isAlmostEqual;\n"],"names":["isAlmostEqual","z1","z2","maxULP","parts1","reim","parts2","isAlmostEqualF64"],"mappings":";;6MAsDA,SAASA,EAAeC,EAAIC,EAAIC,GAC/B,IAAIC,EAASC,EAAMJ,GACfK,EAASD,EAAMH,GACnB,OACCK,EAAkBH,EAAQ,GAAKE,EAAQ,GAAKH,IAC5CI,EAAkBH,EAAQ,GAAKE,EAAQ,GAAKH,EAE9C"}